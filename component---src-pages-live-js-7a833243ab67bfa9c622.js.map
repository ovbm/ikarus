{"version":3,"sources":["webpack:///./src/pages/live.js","webpack:///./node_modules/node-fetch/browser.js"],"names":["monthNames","today","Date","useState","gigs","setGigs","getGigs","time","url","fetch","then","res","json","data","reverse","catch","console","log","useEffect","title","description","Content","ButtonContainer","Button","type","onClick","map","concert","dateItem","datetime","split","day","substr","formattedDate","isPastGig","dd","getDate","mm","getMonth","yyyy","getFullYear","style","textAlign","venue","name","city","country","VenueLink","href","outward","appear","keyframes","styled","div","theme","dim","mobilebreakpoint","button","span","global","self","window","Error","getGlobal","module","exports","default","bind","Headers","Request","Response"],"mappings":"2FAAA,iHAQMA,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEIC,EAAQ,IAAIC,KAEH,qBAAO,IAAD,EACKC,mBAAS,IAA1BC,EADY,KACNC,EADM,KAGbC,EAAU,SAACC,GACf,IAAMC,EAAG,yEACE,SAATD,EAAkB,aAAe,IAEnCE,IAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLR,EAAiB,SAATE,EAAkBM,EAAKC,UAAYD,MAE5CE,MAAMC,QAAQC,MAOnB,OAJAC,qBAAU,WACRZ,MACC,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEa,MAAM,2BACNC,YAAY,4EAEd,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAQC,KAAK,SAASC,QAAS,kBAAMnB,EAAQ,cAA7C,YAGA,kBAACiB,EAAD,CAAQC,KAAK,SAASC,QAAS,kBAAMnB,EAAQ,UAA7C,SAIDF,EAAKsB,KAAI,SAACC,GAET,IAAMC,EAAWD,EAAQE,SAASC,MAAM,KAElCC,EAAMH,EAAS,GAAGI,OAAO,EAAG,GAE5BC,EAAgB,IAAI/B,KAAK0B,EAAS,GAAIA,EAAS,GAAK,EAAGG,GACvDG,EAAYD,EAAgBhC,EAE5BkC,EAAKF,EAAcG,UAEnBC,EAAKrC,EAAWiC,EAAcK,YAC9BC,EAAON,EAAcO,cAC3B,OACE,6BACE,uBAAGC,MAAO,CAAEC,UAAW,WACpBR,EACIC,EADK,IACCE,EADD,IACOE,EADP,KACgBZ,EAAQgB,MAAMC,KAD9B,KACuCjB,EAAQgB,MAAME,KADrD,IAC6DlB,EAAQgB,MAAMG,QAD3E,IAGR,oCACE,8BAAUX,EAAV,IAAgBE,EAAhB,IAAsBE,GACtB,6BACA,kBAACQ,EAAD,KACE,kBAAC,IAAD,CAAMC,KAAMrB,EAAQP,YAAa6B,SAAO,GACrCtB,EAAQgB,MAAMC,OAGnB,6BACA,8BAAUjB,EAAQgB,MAAME,KAAxB,KAAiClB,EAAQgB,MAAMG,eAO3D,uBAAGL,MAAO,CAAEC,UAAW,WAAvB,iCAMR,IAAMQ,EAASC,YAAH,wFAYN9B,EAAU+B,IAAOC,IAAV,gEAAGD,CAAH,oMAIEF,EAIwBI,IAAMC,IAAIC,kBAK3ClC,EAAkB8B,IAAOC,IAAV,wEAAGD,CAAH,kEAOf7B,EAAS6B,IAAOK,OAAV,+DAAGL,CAAH,2KAeNL,EAAYK,IAAOM,KAAV,kEAAGN,CAAH,8FAGwBE,IAAMC,IAAIC,mB,kCCnJjD,IAmBIG,EAnBY,WAId,GAAoB,oBAATC,KACT,OAAOA,KAGT,GAAsB,oBAAXC,OACT,OAAOA,OAGT,QAAsB,IAAXF,EACT,OAAOA,EAGT,MAAM,IAAIG,MAAM,kCAGLC,GACbC,EAAOC,QAAUA,EAAUN,EAAOlD,MAE9BkD,EAAOlD,QACTwD,EAAQC,QAAUP,EAAOlD,MAAM0D,KAAKR,IAGtCM,EAAQG,QAAUT,EAAOS,QACzBH,EAAQI,QAAUV,EAAOU,QACzBJ,EAAQK,SAAWX,EAAOW","file":"component---src-pages-live-js-7a833243ab67bfa9c622.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport fetch from 'node-fetch';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport theme from '../utils/themeconstants';\nimport Link from '../components/link';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\nconst today = new Date();\n\nexport default () => {\n  const [gigs, setGigs] = useState([]);\n\n  const getGigs = (time) => {\n    const url = `https://rest.bandsintown.com/artists/Ikarus/events?app_id=mockingbird${\n      time === 'past' ? '&date=past' : ''\n    }`;\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setGigs(time === 'past' ? data.reverse() : data);\n      })\n      .catch(console.log);\n  };\n\n  useEffect(() => {\n    getGigs();\n  }, []);\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Ikarus - Live tour dates\"\n        description=\"IKARUS tour dates. Currently on tour with their second Album Mosaismic.\"\n      />\n      <Content>\n        <ButtonContainer>\n          <Button type=\"button\" onClick={() => getGigs('upcoming')}>\n            UPCOMING\n          </Button>\n          <Button type=\"button\" onClick={() => getGigs('past')}>\n            PAST\n          </Button>\n        </ButtonContainer>\n        {gigs.map((concert) => {\n          // split out the date string\n          const dateItem = concert.datetime.split('-');\n          // grab the first two characters of the last part of the split out date string\n          const day = dateItem[2].substr(0, 2);\n          // create a date object\n          const formattedDate = new Date(dateItem[0], dateItem[1] - 1, day);\n          const isPastGig = formattedDate < today;\n          // set the date\n          const dd = formattedDate.getDate();\n          // set the month and reference the month name from the monthNames array\n          const mm = monthNames[formattedDate.getMonth()];\n          const yyyy = formattedDate.getFullYear();\n          return (\n            <div>\n              <p style={{ textAlign: 'center' }}>\n                {isPastGig ? (\n                  `${dd} ${mm} ${yyyy}, ${concert.venue.name}, ${concert.venue.city} ${concert.venue.country} `\n                ) : (\n                  <>\n                    <span>{`${dd} ${mm} ${yyyy}`}</span>\n                    <br />\n                    <VenueLink>\n                      <Link href={concert.description} outward>\n                        {concert.venue.name}\n                      </Link>\n                    </VenueLink>\n                    <br />\n                    <span>{`${concert.venue.city}, ${concert.venue.country}`}</span>\n                  </>\n                )}\n              </p>\n            </div>\n          );\n        })}\n        <p style={{ textAlign: 'center' }}>more dates to be announced</p>\n      </Content>\n    </Layout>\n  );\n};\n\nconst appear = keyframes`\n  from {\n    transform: translateY(5px);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n`;\n\nconst Content = styled.div`\n  max-width: 960px;\n  min-height: 600px;\n  margin: 0 auto;\n  animation: ${appear} 0.8s ease;\n  animation-delay: 0.2s;\n  opacity: 0;\n  animation-fill-mode: forwards;\n  @media only screen and (max-width: ${theme.dim.mobilebreakpoint}px) {\n    padding: 0px 1.5em;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  margin: 2em auto;\n  width: 100%;\n  max-width: 40em;\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  margin: 0 1em;\n  background: none;\n  color: white;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  transition: all 0.3s ease 0s;\n  &:hover {\n    letter-spacing: 0.1em;\n  }\n`;\n\nconst VenueLink = styled.span`\n  font-size: 24px;\n  font-weight: bold;\n  @media only screen and (max-width: ${theme.dim.mobilebreakpoint}px) {\n    font-size: 20px;\n  }\n`;\n","\"use strict\"; // ref: https://github.com/tc39/proposal-global\n\nvar getGlobal = function getGlobal() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n};\n\nvar global = getGlobal();\nmodule.exports = exports = global.fetch; // Needed for TypeScript and Webpack.\n\nif (global.fetch) {\n  exports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;"],"sourceRoot":""}