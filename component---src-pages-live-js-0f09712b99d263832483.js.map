{"version":3,"file":"component---src-pages-live-js-0f09712b99d263832483.js","mappings":"6GAEA,IAmBIA,EAnBY,WAId,GAAoB,oBAATC,KACT,OAAOA,KAGT,GAAsB,oBAAXC,OACT,OAAOA,OAGT,QAAsB,IAAXF,EACT,OAAOA,EAGT,MAAM,IAAIG,MAAM,kCAGLC,GACbC,EAAOC,QAAUA,EAAUN,EAAOO,MAE9BP,EAAOO,QACTD,EAAA,QAAkBN,EAAOO,MAAMC,KAAKR,IAGtCM,EAAQG,QAAUT,EAAOS,QACzBH,EAAQI,QAAUV,EAAOU,QACzBJ,EAAQK,SAAWX,EAAOW,U,4GCtBpBC,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAqFIC,GAASC,EAAAA,EAAAA,WAAH,wFAYNC,EAAUC,EAAAA,QAAAA,IAAAA,WAAH,qDAAGA,CAAH,oMAIEH,EAIwBI,EAAAA,EAAAA,IAAAA,kBAKjCC,EAAkBF,EAAAA,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,iJAKkBC,EAAAA,EAAAA,IAAAA,kBAKjCE,EAASH,EAAAA,QAAAA,OAAAA,WAAH,oDAAGA,CAAH,8LAOK,SAACI,GAAD,OAAYA,EAAMC,OAAS,OAAS,YAS/CC,EAAYN,EAAAA,QAAAA,KAAAA,WAAH,uDAAGA,CAAH,8FAGwBC,EAAAA,EAAAA,IAAAA,kBAKjCM,EAAOP,EAAAA,QAAAA,KAAAA,WAAH,kDAAGA,CAAH,8FAG6BC,EAAAA,EAAAA,IAAAA,kBAKvC,UArJa,WACX,OAAwBO,EAAAA,EAAAA,UAAS,IAA1BC,EAAP,KAAaC,EAAb,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAlCG,EAAP,KAAiBC,EAAjB,MAaAC,EAAAA,EAAAA,YAAU,WARRtB,GAAAA,CADE,kFAECuB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLP,EAAQO,MAETC,MAAMC,QAAQC,OAKhB,IAEH,IAAMC,EAAQ,IAAIC,KAEZC,EAAeZ,EACjBF,EAAKe,QAAO,SAACC,GAAD,OAAS,IAAIH,KAAKG,EAAIC,WAAaL,KAC/CZ,EAAKe,QAAO,SAACC,GAAD,OAAS,IAAIH,KAAKG,EAAIC,UAAYL,KAAOM,UAEzD,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEC,MAAM,2BACNC,YAAY,4EAEd,gBAAC9B,EAAD,KACE,gBAACG,EAAD,KACE,gBAACC,EAAD,CAAQ2B,KAAK,SAASzB,OAAQM,EAAUoB,QAAS,kBAAMnB,GAAY,KAAnE,YAGA,gBAACT,EAAD,CAAQ2B,KAAK,SAASzB,QAASM,EAAUoB,QAAS,kBAAMnB,GAAY,KAApE,SAIDW,EAAaS,KAAI,SAACC,GAEjB,IAAMC,EAAWD,EAAQP,SAASS,MAAM,KAElCC,EAAMF,EAAS,GAAGG,OAAO,EAAG,GAE5BC,EAAgB,IAAIhB,KAAKY,EAAS,GAAIA,EAAS,GAAK,EAAGE,GAEvDG,EAAKD,EAAcE,UAEnBC,EAAK7C,EAAW0C,EAAcI,YAC9BC,EAAOL,EAAcM,cAC3B,OACE,uBAAKC,IAAKZ,EAAQP,UAChB,qBAAGoB,MAAO,CAAEC,UAAW,WACnBpC,EAGA,gCACE,4BAAU4B,EAAV,IAAgBE,EAAhB,IAAsBE,GACtB,2BACA,gBAACpC,EAAD,KAAO0B,EAAQe,MAAMC,MACrB,2BACA,gBAAC3C,EAAD,KACE,gBAAC,IAAD,CAAM4C,KAAMjB,EAAQJ,YAAasB,SAAO,GACrClB,EAAQe,MAAMI,OAGnB,2BACA,4BAAOnB,EAAQe,MAAMK,UAbpBd,EADJ,IACUE,EADV,IACgBE,EADhB,KACyBV,EAAQe,MAAMI,KADvC,KACgDnB,EAAQe,MAAMC,KAD9D,IACsEhB,EAAQe,MAAMK,QADpF,SAqBT,qBAAGP,MAAO,CAAEC,UAAW,WAAvB","sources":["webpack://ikarus.band/./node_modules/node-fetch/browser.js","webpack://ikarus.band/./src/pages/live.js"],"sourcesContent":["\"use strict\"; // ref: https://github.com/tc39/proposal-global\n\nvar getGlobal = function getGlobal() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('unable to locate global object');\n};\n\nvar global = getGlobal();\nmodule.exports = exports = global.fetch; // Needed for TypeScript and Webpack.\n\nif (global.fetch) {\n  exports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","import React, { useEffect, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport fetch from 'node-fetch';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport theme from '../utils/themeconstants';\nimport Link from '../components/link';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst Live = () => {\n  const [gigs, setGigs] = useState([]);\n  const [upcoming, setUpcoming] = useState(true);\n\n  const getGigs = () => {\n    const url =\n      'https://rest.bandsintown.com/artists/Ikarus/events?app_id=mockingbird&date=all';\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setGigs(data);\n      })\n      .catch(console.log);\n  };\n\n  useEffect(() => {\n    getGigs();\n  }, []);\n\n  const today = new Date();\n\n  const filteredGigs = upcoming\n    ? gigs.filter((gig) => new Date(gig.datetime) >= today)\n    : gigs.filter((gig) => new Date(gig.datetime) < today).reverse();\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Ikarus - Live tour dates\"\n        description=\"IKARUS tour dates. Currently on tour with their second Album Mosaismic.\"\n      />\n      <Content>\n        <ButtonContainer>\n          <Button type=\"button\" active={upcoming} onClick={() => setUpcoming(true)}>\n            UPCOMING\n          </Button>\n          <Button type=\"button\" active={!upcoming} onClick={() => setUpcoming(false)}>\n            PAST\n          </Button>\n        </ButtonContainer>\n        {filteredGigs.map((concert) => {\n          // split out the date string\n          const dateItem = concert.datetime.split('-');\n          // grab the first two characters of the last part of the split out date string\n          const day = dateItem[2].substr(0, 2);\n          // create a date object\n          const formattedDate = new Date(dateItem[0], dateItem[1] - 1, day);\n          // set the date\n          const dd = formattedDate.getDate();\n          // set the month and reference the month name from the monthNames array\n          const mm = monthNames[formattedDate.getMonth()];\n          const yyyy = formattedDate.getFullYear();\n          return (\n            <div key={concert.datetime}>\n              <p style={{ textAlign: 'center' }}>\n                {!upcoming ? (\n                  `${dd} ${mm} ${yyyy}, ${concert.venue.name}, ${concert.venue.city} ${concert.venue.country} `\n                ) : (\n                  <>\n                    <span>{`${dd} ${mm} ${yyyy}`}</span>\n                    <br />\n                    <City>{concert.venue.city}</City>\n                    <br />\n                    <VenueLink>\n                      <Link href={concert.description} outward>\n                        {concert.venue.name}\n                      </Link>\n                    </VenueLink>\n                    <br />\n                    <span>{concert.venue.country}</span>\n                  </>\n                )}\n              </p>\n            </div>\n          );\n        })}\n        <p style={{ textAlign: 'center' }}>more dates to be announced</p>\n      </Content>\n    </Layout>\n  );\n};\n\nconst appear = keyframes`\n  from {\n    transform: translateY(5px);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n`;\n\nconst Content = styled.div`\n  max-width: 960px;\n  min-height: 600px;\n  margin: 0 auto;\n  animation: ${appear} 0.8s ease;\n  animation-delay: 0.2s;\n  opacity: 0;\n  animation-fill-mode: forwards;\n  @media only screen and (max-width: ${theme.dim.mobilebreakpoint}px) {\n    padding: 0px 1.5em;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  margin: 2em auto 2.5em auto;\n  width: 100%;\n  max-width: 40em;\n  text-align: center;\n  @media only screen and (max-width: ${theme.dim.mobilebreakpoint}px) {\n    margin: 1.5em auto 2em auto;\n  }\n`;\n\nconst Button = styled.button`\n  margin: 0 1em;\n  background: none;\n  color: white;\n  border: none;\n  padding: 0;\n  font-size: 1.4em;\n  font-weight: ${(props) => (props.active ? 'bold' : 'normal')};\n  cursor: pointer;\n  outline: inherit;\n  transition: all 0.3s ease 0s;\n  &:hover {\n    letter-spacing: 0.1em;\n  }\n`;\n\nconst VenueLink = styled.span`\n  font-size: 19px;\n  font-weight: bold;\n  @media only screen and (max-width: ${theme.dim.mobilebreakpoint}px) {\n    font-size: 17px;\n  }\n`;\n\nconst City = styled.span`\n  font-size: 24px;\n  font-weight: bold;\n  @media only screen and (max-width: ${theme.dim.mobilebreakpoint}px) {\n    font-size: 20px;\n  }\n`;\n\nexport default Live;\n"],"names":["global","self","window","Error","getGlobal","module","exports","fetch","bind","Headers","Request","Response","monthNames","appear","keyframes","Content","styled","theme","ButtonContainer","Button","props","active","VenueLink","City","useState","gigs","setGigs","upcoming","setUpcoming","useEffect","then","res","json","data","catch","console","log","today","Date","filteredGigs","filter","gig","datetime","reverse","title","description","type","onClick","map","concert","dateItem","split","day","substr","formattedDate","dd","getDate","mm","getMonth","yyyy","getFullYear","key","style","textAlign","venue","city","href","outward","name","country"],"sourceRoot":""}